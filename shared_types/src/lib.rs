use serde::{Deserialize, Serialize};

pub struct EvalContext {
    pub chogath_stacks: f64,
    pub veigar_stacks: f64,
    pub nasus_stacks: f64,
    pub smolder_stacks: f64,
    pub aurelion_sol_stacks: f64,
    pub thresh_stacks: f64,
    pub kindred_stacks: f64,
    pub belveth_stacks: f64,
    pub adaptative_damage: f64,
    pub level: f64,
    pub physical_multiplier: f64,
    pub magic_multiplier: f64,
    pub steelcaps_effect: f64,
    pub randuin_effect: f64,
    pub rocksolid_effect: f64,
    pub enemy_bonus_health: f64,
    pub enemy_armor: f64,
    pub enemy_max_health: f64,
    pub enemy_health: f64,
    pub enemy_current_health: f64,
    pub enemy_missing_health: f64,
    pub enemy_magic_resist: f64,
    pub base_health: f64,
    pub base_ad: f64,
    pub base_armor: f64,
    pub base_magic_resist: f64,
    pub base_mana: f64,
    pub bonus_ad: f64,
    pub bonus_armor: f64,
    pub bonus_magic_resist: f64,
    pub bonus_health: f64,
    pub bonus_mana: f64,
    pub bonus_move_speed: f64,
    pub armor_penetration_flat: f64,
    pub armor_penetration_percent: f64,
    pub magic_penetration_flat: f64,
    pub magic_penetration_percent: f64,
    pub max_mana: f64,
    pub current_mana: f64,
    pub max_health: f64,
    pub current_health: f64,
    pub armor: f64,
    pub magic_resist: f64,
    pub crit_chance: f64,
    pub crit_damage: f64,
    pub attack_speed: f64,
    pub missing_health: f64,
    pub ap: f64,
    pub ad: f64,
}

#[derive(Default, Copy, Clone, Serialize, Deserialize)]
pub enum DamageType {
    Physical,
    Magic,
    Mixed,
    True,
    Adaptative,
    #[default]
    Unknown,
}

impl ToString for DamageType {
    fn to_string(&self) -> String {
        let res = match self {
            DamageType::Physical => "PHYSICAL_DAMAGE",
            DamageType::Magic => "MAGIC_DAMAGE",
            DamageType::Mixed => "MIXED_DAMAGE",
            DamageType::True => "TRUE_DAMAGE",
            DamageType::Adaptative => "ADAPTATIVE_DAMAGE",
            DamageType::Unknown => "UNKNOWN_DAMAGE",
        };
        res.to_string()
    }
}

#[derive(Copy, Clone, Serialize, Deserialize)]
pub enum Attrs {
    None,
    Onhit,
    OnhitMin,
    OnhitMax,
}

#[derive(Copy, Clone)]
pub enum AttackType {
    Melee,
    Ranged,
}

#[derive(Copy, Clone)]
pub enum AdaptativeType {
    Physical,
    Magic,
}

#[derive(Copy, Clone, Serialize)]
pub enum Position {
    Top,
    Jungle,
    Middle,
    Bottom,
    Support,
}

impl Position {
    pub fn from_raw(raw: &str) -> Self {
        match raw {
            "TOP" => Position::Top,
            "JUNGLE" => Position::Jungle,
            "MIDDLE" => Position::Middle,
            "BOTTOM" => Position::Bottom,
            "SUPPORT" => Position::Support,
            _ => Position::Top,
        }
    }
}

#[derive(Copy, Clone, Serialize)]
pub enum AbilityLike {
    P(AbilityName),
    Q(AbilityName),
    W(AbilityName),
    E(AbilityName),
    R(AbilityName),
    A,
    C,
    O,
}

impl AbilityLike {
    pub fn from_str(s: &str) -> String {
        match s.chars().next() {
            Some('P') => AbilityLike::from_str_p(&s).to_string(),
            Some('Q') => AbilityLike::from_str_q(&s).to_string(),
            Some('W') => AbilityLike::from_str_w(&s).to_string(),
            Some('E') => AbilityLike::from_str_e(&s).to_string(),
            Some('R') => AbilityLike::from_str_r(&s).to_string(),
            _ => s.to_string(),
        }
    }
}

macro_rules! impl_key {
    ($field:ident) => {
        paste::paste! {
            impl AbilityLike {
                pub fn [<from_str_ $field>](s: &str) -> &'static str {
                    match s {
                        concat!(stringify!([<$field:upper>]), "1") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_1)"),
                        concat!(stringify!([<$field:upper>]), "2") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_2)"),
                        concat!(stringify!([<$field:upper>]), "3") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_3)"),
                        concat!(stringify!([<$field:upper>]), "4") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_4)"),
                        concat!(stringify!([<$field:upper>]), "5") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_5)"),
                        concat!(stringify!([<$field:upper>]), "6") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_6)"),
                        concat!(stringify!([<$field:upper>]), "7") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_7)"),
                        concat!(stringify!([<$field:upper>]), "8") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_8)"),
                        concat!(stringify!([<$field:upper>]), "MEGA") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Mega)"),
                        concat!(stringify!([<$field:upper>]), "MAX") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Max)"),
                        concat!(stringify!([<$field:upper>]), "MIN") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Min)"),
                        concat!(stringify!([<$field:upper>]), "MNX") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Minion)"),
                        concat!(stringify!([<$field:upper>]), "MN1") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Minion1)"),
                        concat!(stringify!([<$field:upper>]), "MN2") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Minion2)"),
                        concat!(stringify!([<$field:upper>]), "MN3") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Minion3)"),
                        concat!(stringify!([<$field:upper>]), "MMNX") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::MinionMax)"),
                        concat!(stringify!([<$field:upper>]), "MSTR") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Monster)"),
                        concat!(stringify!([<$field:upper>]), "MST1") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Monster1)"),
                        concat!(stringify!([<$field:upper>]), "MST2") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Monster2)"),
                        concat!(stringify!([<$field:upper>]), "MST3") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Monster3)"),
                        concat!(stringify!([<$field:upper>]), "MST4") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Monster4)"),
                        concat!(stringify!([<$field:upper>]), "MMST") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::MonsterMax)"),
                        stringify!([<$field:upper>]) => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Void)"),
                        concat!(stringify!([<$field:upper>]), "MAX1") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_1Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX2") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_2Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX3") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_3Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX4") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_4Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX5") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_5Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX6") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_6Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX7") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_7Max)"),
                        concat!(stringify!([<$field:upper>]), "MAX8") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_8Max)"),
                        concat!(stringify!([<$field:upper>]), "MIN1") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_1Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN2") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_2Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN3") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_3Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN4") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_4Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN5") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_5Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN6") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_6Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN7") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_7Min)"),
                        concat!(stringify!([<$field:upper>]), "MIN8") => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::_8Min)"),
                        _ => concat!("AbilityLike::", stringify!([<$field:upper>]), "(AbilityName::Void)")
                    }
                }
                pub fn [<to_str_ $field>](&self) -> &'static str {
                    match self {
                        AbilityLike::[<$field:upper>](v) => {
                            match v {
                                AbilityName::_1 => concat!(stringify!([<$field:upper>]), "1"),
                                AbilityName::_2 => concat!(stringify!([<$field:upper>]), "2"),
                                AbilityName::_3 => concat!(stringify!([<$field:upper>]), "3"),
                                AbilityName::_4 => concat!(stringify!([<$field:upper>]), "4"),
                                AbilityName::_5 => concat!(stringify!([<$field:upper>]), "5"),
                                AbilityName::_6 => concat!(stringify!([<$field:upper>]), "6"),
                                AbilityName::_7 => concat!(stringify!([<$field:upper>]), "7"),
                                AbilityName::_8 => concat!(stringify!([<$field:upper>]), "8"),
                                AbilityName::Mega => concat!(stringify!([<$field:upper>]), "MEGA"),
                                AbilityName::Max => concat!(stringify!([<$field:upper>]), "MAX"),
                                AbilityName::Min => concat!(stringify!([<$field:upper>]), "MIN"),
                                AbilityName::Minion => concat!(stringify!([<$field:upper>]), "MNX"),
                                AbilityName::Minion1 => concat!(stringify!([<$field:upper>]), "MN1"),
                                AbilityName::Minion2 => concat!(stringify!([<$field:upper>]), "MN2"),
                                AbilityName::Minion3 => concat!(stringify!([<$field:upper>]), "MN3"),
                                AbilityName::MinionMax => concat!(stringify!([<$field:upper>]), "MMNX"),
                                AbilityName::Monster => concat!(stringify!([<$field:upper>]), "MSTR"),
                                AbilityName::Monster1 => concat!(stringify!([<$field:upper>]), "MST1"),
                                AbilityName::Monster2 => concat!(stringify!([<$field:upper>]), "MST2"),
                                AbilityName::Monster3 => concat!(stringify!([<$field:upper>]), "MST3"),
                                AbilityName::Monster4 => concat!(stringify!([<$field:upper>]), "MST4"),
                                AbilityName::MonsterMax => concat!(stringify!([<$field:upper>]), "MMST"),
                                AbilityName::Void => stringify!([<$field:upper>]),
                                AbilityName::_1Max => concat!(stringify!([<$field:upper>]), "MAX1"),
                                AbilityName::_2Max => concat!(stringify!([<$field:upper>]), "MAX2"),
                                AbilityName::_3Max => concat!(stringify!([<$field:upper>]), "MAX3"),
                                AbilityName::_4Max => concat!(stringify!([<$field:upper>]), "MAX4"),
                                AbilityName::_5Max => concat!(stringify!([<$field:upper>]), "MAX5"),
                                AbilityName::_6Max => concat!(stringify!([<$field:upper>]), "MAX6"),
                                AbilityName::_7Max => concat!(stringify!([<$field:upper>]), "MAX7"),
                                AbilityName::_8Max => concat!(stringify!([<$field:upper>]), "MAX8"),
                                AbilityName::_1Min => concat!(stringify!([<$field:upper>]), "MIN1"),
                                AbilityName::_2Min => concat!(stringify!([<$field:upper>]), "MIN2"),
                                AbilityName::_3Min => concat!(stringify!([<$field:upper>]), "MIN3"),
                                AbilityName::_4Min => concat!(stringify!([<$field:upper>]), "MIN4"),
                                AbilityName::_5Min => concat!(stringify!([<$field:upper>]), "MIN5"),
                                AbilityName::_6Min => concat!(stringify!([<$field:upper>]), "MIN6"),
                                AbilityName::_7Min => concat!(stringify!([<$field:upper>]), "MIN7"),
                                AbilityName::_8Min => concat!(stringify!([<$field:upper>]), "MIN8"),
                            }
                        },
                        _ => {
                            "UNDF"
                        }
                    }
                }
            }
        }
    };
}

impl_key!(p);
impl_key!(q);
impl_key!(w);
impl_key!(e);
impl_key!(r);

#[derive(Clone, Copy, Serialize)]
pub enum AbilityName {
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    Mega,
    Max,
    Min,
    Minion,
    Minion1,
    Minion2,
    Minion3,
    MinionMax,
    Monster,
    Monster1,
    Monster2,
    Monster3,
    Monster4,
    MonsterMax,
    Void,
    _1Max,
    _2Max,
    _3Max,
    _4Max,
    _5Max,
    _6Max,
    _7Max,
    _8Max,
    _1Min,
    _2Min,
    _3Min,
    _4Min,
    _5Min,
    _6Min,
    _7Min,
    _8Min,
}

pub struct CachedChampion {
    pub adaptative_type: AdaptativeType,
    pub attack_type: AttackType,
    pub positions: &'static [Position],
    pub stats: CachedChampionStats,
    pub abilities: &'static [(AbilityLike, CachedChampionAbility)],
}

pub struct CachedChampionAbility {
    pub damage_type: DamageType,
    pub attributes: Attrs,
    pub minimum_damage: fn(u8, &EvalContext) -> f64,
    pub maximum_damage: fn(u8, &EvalContext) -> f64,
}

pub struct CachedChampionStatsMap {
    pub flat: f64,
    pub per_level: f64,
}

pub struct CachedChampionStats {
    pub health: CachedChampionStatsMap,
    pub mana: CachedChampionStatsMap,
    pub armor: CachedChampionStatsMap,
    pub magic_resistance: CachedChampionStatsMap,
    pub attack_damage: CachedChampionStatsMap,
    pub attack_speed: CachedChampionStatsMap,
    pub movespeed: f64,
    pub critical_strike_damage: f64,
    pub critical_strike_damage_modifier: f64,
    pub attack_speed_ratio: f64,
    pub attack_range: f64,
    pub aram_damage_taken: f64,
    pub aram_damage_dealt: f64,
    pub urf_damage_taken: f64,
    pub urf_damage_dealt: f64,
}

pub struct CachedItemDamages {
    pub minimum_damage: fn(u8, &EvalContext) -> f64,
    pub maximum_damage: fn(u8, &EvalContext) -> f64,
}

pub enum StatName {
    AbilityHaste(f64),
    AbilityPower(f64),
    Armor(f64),
    ArmorPenetration(f64),
    MagicPenetration(f64),
    AttackDamage(f64),
    AttackSpeed(f64),
    GoldPer10Seconds(f64),
    AdaptiveForce(f64),
    CriticalStrikeChance(f64),
    CriticalStrikeDamage(f64),
    Health(f64),
    LifeSteal(f64),
    MagicResist(f64),
    Mana(f64),
    MoveSpeed(f64),
    Omnivamp(f64),
    BaseHealthRegen(f64),
    BaseManaRegen(f64),
    Tenacity(f64),
    HealAndShieldPower(f64),
}

pub struct CachedItem {
    pub gold: u16,
    pub prettified_stats: &'static [StatName],
    pub damage_type: Option<DamageType>,
    pub stats: CachedItemStats,
    pub ranged: CachedItemDamages,
    pub melee: CachedItemDamages,
    pub attributes: Attrs,
}

pub struct CachedMetaItem {
    pub jungle: &'static [ItemId],
    pub top: &'static [ItemId],
    pub mid: &'static [ItemId],
    pub adc: &'static [ItemId],
    pub support: &'static [ItemId],
}

pub struct CachedRune {
    pub damage_type: DamageType,
    pub ranged: fn(u8, &EvalContext) -> f64,
    pub melee: fn(u8, &EvalContext) -> f64,
}

pub struct CachedItemStats {
    pub ability_power: f64,
    pub armor: f64,
    pub armor_penetration_percent: f64,
    pub armor_penetration_flat: f64,
    pub magic_penetration_percent: f64,
    pub magic_penetration_flat: f64,
    pub attack_damage: f64,
    pub attack_speed: f64,
    pub critical_strike_chance: f64,
    pub critical_strike_damage: f64,
    pub health: f64,
    pub lifesteal: f64,
    pub magic_resistance: f64,
    pub mana: f64,
    pub movespeed: f64,
    pub omnivamp: f64,
}

#[inline(always)]
pub const fn zero(_: u8, _: &EvalContext) -> f64 {
    0.0
}

#[derive(Copy, Clone)]
pub struct DamageExpression {
    pub level: u8,
    pub attributes: Attrs,
    pub damage_type: DamageType,
    pub minimum_damage: fn(u8, &EvalContext) -> f64,
    pub maximum_damage: fn(u8, &EvalContext) -> f64,
}

#[derive(Copy, Clone, Serialize, Deserialize)]
pub enum ChampionId {
    Aatrox,
    Ahri,
    Akali,
    Akshan,
    Alistar,
    Ambessa,
    Amumu,
    Anivia,
    Annie,
    Aphelios,
    Ashe,
    AurelionSol,
    Aurora,
    Azir,
    Bard,
    Belveth,
    Blitzcrank,
    Brand,
    Braum,
    Briar,
    Caitlyn,
    Camille,
    Cassiopeia,
    Chogath,
    Corki,
    Darius,
    Diana,
    Draven,
    DrMundo,
    Ekko,
    Elise,
    Evelynn,
    Ezreal,
    Fiddlesticks,
    Fiora,
    Fizz,
    Galio,
    Gangplank,
    Garen,
    Gnar,
    Gragas,
    Graves,
    Gwen,
    Hecarim,
    Heimerdinger,
    Hwei,
    Illaoi,
    Irelia,
    Ivern,
    Janna,
    JarvanIV,
    Jax,
    Jayce,
    Jhin,
    Jinx,
    Kaisa,
    Kalista,
    Karma,
    Karthus,
    Kassadin,
    Katarina,
    Kayle,
    Kayn,
    Kennen,
    Khazix,
    Kindred,
    Kled,
    KogMaw,
    KSante,
    Leblanc,
    LeeSin,
    Leona,
    Lillia,
    Lissandra,
    Lucian,
    Lulu,
    Lux,
    Malphite,
    Malzahar,
    Maokai,
    MasterYi,
    Mel,
    Milio,
    MissFortune,
    MonkeyKing,
    Mordekaiser,
    Morgana,
    Naafiri,
    Nami,
    Nasus,
    Nautilus,
    Neeko,
    Nidalee,
    Nilah,
    Nocturne,
    Nunu,
    Olaf,
    Orianna,
    Ornn,
    Pantheon,
    Poppy,
    Pyke,
    Qiyana,
    Quinn,
    Rakan,
    Rammus,
    RekSai,
    Rell,
    Renata,
    Renekton,
    Rengar,
    Riven,
    Rumble,
    Ryze,
    Samira,
    Sejuani,
    Senna,
    Seraphine,
    Sett,
    Shaco,
    Shen,
    Shyvana,
    Singed,
    Sion,
    Sivir,
    Skarner,
    Smolder,
    Sona,
    Soraka,
    Swain,
    Sylas,
    Syndra,
    TahmKench,
    Taliyah,
    Talon,
    Taric,
    Teemo,
    Thresh,
    Tristana,
    Trundle,
    Tryndamere,
    TwistedFate,
    Twitch,
    Udyr,
    Urgot,
    Varus,
    Vayne,
    Veigar,
    Velkoz,
    Vex,
    Vi,
    Viego,
    Viktor,
    Vladimir,
    Volibear,
    Warwick,
    Xayah,
    Xerath,
    XinZhao,
    Yasuo,
    Yone,
    Yorick,
    Yunara,
    Yuumi,
    Zac,
    Zed,
    Zeri,
    Ziggs,
    Zilean,
    Zoe,
    Zyra,
}

pub static CHAMPION_NAME_TO_ID: phf::OrderedMap<&'static str, ChampionId> = phf::phf_ordered_map!(
    "Aatrox" => ChampionId::Aatrox,
    "Ahri" => ChampionId::Ahri,
    "Akali" => ChampionId::Akali,
    "Akshan" => ChampionId::Akshan,
    "Alistar" => ChampionId::Alistar,
    "Ambessa" => ChampionId::Ambessa,
    "Amumu" => ChampionId::Amumu,
    "Anivia" => ChampionId::Anivia,
    "Annie" => ChampionId::Annie,
    "Aphelios" => ChampionId::Aphelios,
    "Ashe" => ChampionId::Ashe,
    "Aurelion Sol" => ChampionId::AurelionSol,
    "Aurora" => ChampionId::Aurora,
    "Azir" => ChampionId::Azir,
    "Bard" => ChampionId::Bard,
    "Bel'Veth" => ChampionId::Belveth,
    "Blitzcrank" => ChampionId::Blitzcrank,
    "Brand" => ChampionId::Brand,
    "Braum" => ChampionId::Braum,
    "Briar" => ChampionId::Briar,
    "Caitlyn" => ChampionId::Caitlyn,
    "Camille" => ChampionId::Camille,
    "Cassiopeia" => ChampionId::Cassiopeia,
    "Cho'Gath" => ChampionId::Chogath,
    "Corki" => ChampionId::Corki,
    "Darius" => ChampionId::Darius,
    "Diana" => ChampionId::Diana,
    "Draven" => ChampionId::Draven,
    "Dr. Mundo" => ChampionId::DrMundo,
    "Ekko" => ChampionId::Ekko,
    "Elise" => ChampionId::Elise,
    "Evelynn" => ChampionId::Evelynn,
    "Ezreal" => ChampionId::Ezreal,
    "Fiddlesticks" => ChampionId::Fiddlesticks,
    "Fiora" => ChampionId::Fiora,
    "Fizz" => ChampionId::Fizz,
    "Galio" => ChampionId::Galio,
    "Gangplank" => ChampionId::Gangplank,
    "Garen" => ChampionId::Garen,
    "Gnar" => ChampionId::Gnar,
    "Gragas" => ChampionId::Gragas,
    "Graves" => ChampionId::Graves,
    "Gwen" => ChampionId::Gwen,
    "Hecarim" => ChampionId::Hecarim,
    "Heimerdinger" => ChampionId::Heimerdinger,
    "Hwei" => ChampionId::Hwei,
    "Illaoi" => ChampionId::Illaoi,
    "Irelia" => ChampionId::Irelia,
    "Ivern" => ChampionId::Ivern,
    "Janna" => ChampionId::Janna,
    "Jarvan IV" => ChampionId::JarvanIV,
    "Jax" => ChampionId::Jax,
    "Jayce" => ChampionId::Jayce,
    "Jhin" => ChampionId::Jhin,
    "Jinx" => ChampionId::Jinx,
    "Kai'Sa" => ChampionId::Kaisa,
    "Kalista" => ChampionId::Kalista,
    "Karma" => ChampionId::Karma,
    "Karthus" => ChampionId::Karthus,
    "Kassadin" => ChampionId::Kassadin,
    "Katarina" => ChampionId::Katarina,
    "Kayle" => ChampionId::Kayle,
    "Kayn" => ChampionId::Kayn,
    "Kennen" => ChampionId::Kennen,
    "Kha'Zix" => ChampionId::Khazix,
    "Kindred" => ChampionId::Kindred,
    "Kled" => ChampionId::Kled,
    "Kog'Maw" => ChampionId::KogMaw,
    "K'Sante" => ChampionId::KSante,
    "LeBlanc" => ChampionId::Leblanc,
    "Lee Sin" => ChampionId::LeeSin,
    "Leona" => ChampionId::Leona,
    "Lillia" => ChampionId::Lillia,
    "Lissandra" => ChampionId::Lissandra,
    "Lucian" => ChampionId::Lucian,
    "Lulu" => ChampionId::Lulu,
    "Lux" => ChampionId::Lux,
    "Malphite" => ChampionId::Malphite,
    "Malzahar" => ChampionId::Malzahar,
    "Maokai" => ChampionId::Maokai,
    "Master Yi" => ChampionId::MasterYi,
    "Mel" => ChampionId::Mel,
    "Milio" => ChampionId::Milio,
    "Miss Fortune" => ChampionId::MissFortune,
    "Wukong" => ChampionId::MonkeyKing,
    "Mordekaiser" => ChampionId::Mordekaiser,
    "Morgana" => ChampionId::Morgana,
    "Naafiri" => ChampionId::Naafiri,
    "Nami" => ChampionId::Nami,
    "Nasus" => ChampionId::Nasus,
    "Nautilus" => ChampionId::Nautilus,
    "Neeko" => ChampionId::Neeko,
    "Nidalee" => ChampionId::Nidalee,
    "Nilah" => ChampionId::Nilah,
    "Nocturne" => ChampionId::Nocturne,
    "Nunu & Willump" => ChampionId::Nunu,
    "Olaf" => ChampionId::Olaf,
    "Orianna" => ChampionId::Orianna,
    "Ornn" => ChampionId::Ornn,
    "Pantheon" => ChampionId::Pantheon,
    "Poppy" => ChampionId::Poppy,
    "Pyke" => ChampionId::Pyke,
    "Qiyana" => ChampionId::Qiyana,
    "Quinn" => ChampionId::Quinn,
    "Rakan" => ChampionId::Rakan,
    "Rammus" => ChampionId::Rammus,
    "Rek'Sai" => ChampionId::RekSai,
    "Rell" => ChampionId::Rell,
    "Renata Glasc" => ChampionId::Renata,
    "Renekton" => ChampionId::Renekton,
    "Rengar" => ChampionId::Rengar,
    "Riven" => ChampionId::Riven,
    "Rumble" => ChampionId::Rumble,
    "Ryze" => ChampionId::Ryze,
    "Samira" => ChampionId::Samira,
    "Sejuani" => ChampionId::Sejuani,
    "Senna" => ChampionId::Senna,
    "Seraphine" => ChampionId::Seraphine,
    "Sett" => ChampionId::Sett,
    "Shaco" => ChampionId::Shaco,
    "Shen" => ChampionId::Shen,
    "Shyvana" => ChampionId::Shyvana,
    "Singed" => ChampionId::Singed,
    "Sion" => ChampionId::Sion,
    "Sivir" => ChampionId::Sivir,
    "Skarner" => ChampionId::Skarner,
    "Smolder" => ChampionId::Smolder,
    "Sona" => ChampionId::Sona,
    "Soraka" => ChampionId::Soraka,
    "Swain" => ChampionId::Swain,
    "Sylas" => ChampionId::Sylas,
    "Syndra" => ChampionId::Syndra,
    "Tahm Kench" => ChampionId::TahmKench,
    "Taliyah" => ChampionId::Taliyah,
    "Talon" => ChampionId::Talon,
    "Taric" => ChampionId::Taric,
    "Teemo" => ChampionId::Teemo,
    "Thresh" => ChampionId::Thresh,
    "Tristana" => ChampionId::Tristana,
    "Trundle" => ChampionId::Trundle,
    "Tryndamere" => ChampionId::Tryndamere,
    "Twisted Fate" => ChampionId::TwistedFate,
    "Twitch" => ChampionId::Twitch,
    "Udyr" => ChampionId::Udyr,
    "Urgot" => ChampionId::Urgot,
    "Varus" => ChampionId::Varus,
    "Vayne" => ChampionId::Vayne,
    "Veigar" => ChampionId::Veigar,
    "Vel'Koz" => ChampionId::Velkoz,
    "Vex" => ChampionId::Vex,
    "Vi" => ChampionId::Vi,
    "Viego" => ChampionId::Viego,
    "Viktor" => ChampionId::Viktor,
    "Vladimir" => ChampionId::Vladimir,
    "Volibear" => ChampionId::Volibear,
    "Warwick" => ChampionId::Warwick,
    "Xayah" => ChampionId::Xayah,
    "Xerath" => ChampionId::Xerath,
    "Xin Zhao" => ChampionId::XinZhao,
    "Yasuo" => ChampionId::Yasuo,
    "Yone" => ChampionId::Yone,
    "Yorick" => ChampionId::Yorick,
    "Yunara" => ChampionId::Yunara,
    "Yuumi" => ChampionId::Yuumi,
    "Zac" => ChampionId::Zac,
    "Zed" => ChampionId::Zed,
    "Zeri" => ChampionId::Zeri,
    "Ziggs" => ChampionId::Ziggs,
    "Zilean" => ChampionId::Zilean,
    "Zoe" => ChampionId::Zoe,
    "Zyra" => ChampionId::Zyra,
);

#[derive(Debug, Copy, Clone, PartialEq, Deserialize, Serialize)]
pub enum ItemId {
    AbyssalMask,
    AegisoftheLegion,
    AetherWisp,
    AmplifyingTome,
    AnathemasChains,
    AntiTowerSocks,
    ArcaneSweeperTrinket,
    ArchangelsStaff,
    ArdentCenser,
    ArmoredAdvance,
    AtmasReckoning,
    AxiomArc,
    BFSword,
    BamisCinder,
    BandleglassMirror,
    BansheesVeil,
    BaseTurretReinforcedArmorTurretItem,
    BerserkersGreaves,
    BlackCleaver,
    BlackHoleGauntlet,
    BlackSpear,
    BlackfireTorch,
    BladeoftheRuinedKing,
    BlastingWand,
    BlightingJewel,
    BloodlettersCurse,
    Bloodsong,
    Bloodthirster,
    Boots,
    BootsofSwiftness,
    BountyofWorlds,
    BrambleVest,
    CappaJuice,
    CatalystofAeons,
    CaulfieldsWarhammer,
    CelestialOpposition,
    ChainVest,
    ChainlacedCrushers,
    ChempunkChainsword,
    CloakofAgility,
    CloakofStarryNight,
    ClothArmor,
    ControlWard,
    CosmicDrive,
    CrimsonLucidity,
    CrownoftheShatteredQueen,
    Cruelty,
    Cryptbloom,
    CrystallineBracer,
    Cull,
    Dagger,
    DarkSeal,
    DarksteelTalons,
    Dawncore,
    DeadMansPlate,
    DeathsDance,
    DeathsDaughter,
    Decapitator,
    DemonKingsCrown,
    DemonicEmbrace,
    DetonationOrb,
    DiamondTippedSpear,
    DivineSunderer,
    DoransBlade,
    DoransRing,
    DoransShield,
    Dragonheart,
    DreamMaker,
    DuskbladeofDraktharr,
    EchoesofHelia,
    Eclipse,
    EdgeofNight,
    EleisasMiracle,
    ElixirofAvarice,
    ElixirofForce,
    ElixirofIron,
    ElixirofSkill,
    ElixirofSorcery,
    ElixirofWrath,
    EmpyreanPromise,
    EnhancedLuckyDice,
    EssenceReaver,
    Everfrost,
    ExecutionersCalling,
    ExperimentalHexplate,
    EyeoftheHerald,
    FaerieCharm,
    FarsightAlteration,
    FatedAshes,
    FiendishCodex,
    Fimbulwinter,
    FireatWill,
    Flesheater,
    ForbiddenIdol,
    ForceofEntropy,
    ForceofNature,
    ForeverForward,
    FrozenHeart,
    Fulmination,
    Galeforce,
    GamblersBlade,
    GargoyleStoneplate,
    Ghostcrawlers,
    GiantsBelt,
    GlacialBuckler,
    GlowingMote,
    Goredrinker,
    GuardianAngel,
    GuardiansAmulet,
    GuardiansBlade,
    GuardiansDirk,
    GuardiansHammer,
    GuardiansHorn,
    GuardiansOrb,
    GuardiansShroud,
    GuinsoosRageblade,
    Gusto,
    GustwalkerHatchling,
    Hamstringer,
    HauntingGuise,
    HealthPotion,
    HearthboundAxe,
    Heartsteel,
    HellfireHatchet,
    HemomancersHelm,
    HexboltCompanion,
    Hexdrinker,
    HextechAlternator,
    HextechGunblade,
    HextechRocketbelt,
    HollowRadiance,
    HorizonFocus,
    Hubris,
    Hullbreaker,
    IcebornGauntlet,
    ImmortalShieldbow,
    ImperialMandate,
    InfinityEdge,
    InnervatingLocket,
    IonianBootsofLucidity,
    JakShoTheProtean,
    JuiceofHaste,
    JuiceofPower,
    JuiceofVitality,
    KaenicRookern,
    Kindlegem,
    KinkouJitte,
    KnightsVow,
    KrakenSlayer,
    LaneSwapDetector,
    LastWhisper,
    LegendaryAssassinItem,
    LegendaryFighterItem,
    LegendaryMageItem,
    LegendaryMarksmanItem,
    LegendarySupportItem,
    LegendaryTankItem,
    LiandrysTorment,
    LichBane,
    Lifeline,
    LightningRod,
    LocketoftheIronSolari,
    LongSword,
    LordDominiksRegards,
    LostChapter,
    LuckyDice,
    LudensCompanion,
    Malignance,
    Manamune,
    MawofMalmortius,
    MejaisSoulstealer,
    MercurialScimitar,
    MercurysTreads,
    MikaelsBlessing,
    MirageBlade,
    MoonflairSpellblade,
    MoonstoneRenewer,
    Morellonomicon,
    MortalReminder,
    MosstomperSeedling,
    Muramana,
    NashorsTooth,
    NavoriFlickerblade,
    NeedlesslyLargeRod,
    NegatronCloak,
    NightHarvester,
    Noonquiver,
    NullMagicMantle,
    OblivionOrb,
    OhmwreckerTurretItem,
    Opportunity,
    OracleLens,
    Overcharged,
    OverlordsBloodmail,
    Perplexity,
    Phage,
    PhantomDancer,
    PhreakishGusto,
    Pickaxe,
    PlatedSteelcaps,
    PoroSnax,
    PrismaticItem,
    ProfaneHydra,
    ProwlersClaw,
    Puppeteer,
    PyromancersCloak,
    QuicksilverSash,
    RabadonsDeathcap,
    RadiantVirtue,
    RaiseMorale,
    RanduinsOmen,
    RapidFirecannon,
    RavenousHydra,
    RealityFracture,
    ReapersToll,
    Rectrix,
    RecurveBow,
    Redemption,
    RefillablePotion,
    Regicide,
    ReinforcedArmorTurretItem,
    RejuvenationBead,
    Reverberation,
    Riftmaker,
    RiteofRuin,
    RodofAges,
    RubyCrystal,
    RunaansHurricane,
    Runecarver,
    RunicCompass,
    RylaisCrystalScepter,
    SanguineGift,
    SapphireCrystal,
    ScarecrowEffigy,
    ScorchclawPup,
    ScoutsSlingshot,
    SeekersArmguard,
    SeraphsEmbrace,
    SerpentsFang,
    SerratedDirk,
    SeryldasGrudge,
    Shadowflame,
    ShatteredArmguard,
    Sheen,
    ShieldofMoltenStone,
    ShurelyasBattlesong,
    SlightlyMagicalBoots,
    SolsticeSleigh,
    SorcerersShoes,
    SpearofShojin,
    SpectralCutlass,
    SpectresCowl,
    SpellslingersShoes,
    SpiritVisage,
    StaffofFlowingWater,
    StatBonus,
    StatikkShiv,
    StealthWard,
    SteelSigil,
    SteraksGage,
    Stormrazor,
    Stormsurge,
    Stridebreaker,
    SunderedSky,
    SunfireAegis,
    SuperMechArmor,
    SuperMechPowerField,
    Swiftmarch,
    SwordofBlossomingDawn,
    SwordoftheDivine,
    SymbioticSoles,
    SynchronizedSouls,
    TalismanofAscension,
    TearoftheGoddess,
    Terminus,
    TheBrutalizer,
    TheCollector,
    TheGoldenSpatula,
    Thornmail,
    Tiamat,
    TitanicHydra,
    TotalBiscuitofEverlastingWill,
    Trailblazer,
    TrinityForce,
    Tunneler,
    TurboChemtank,
    TurretPlating,
    TwilightsEdge,
    TwinMask,
    UmbralGlaive,
    UnendingDespair,
    VampiricScepter,
    VerdantBarrier,
    VigilantWardstone,
    VoidStaff,
    VoltaicCyclosword,
    WardensEye,
    WardensMail,
    WarmogsArmor,
    WatchfulWardstone,
    WingedMoonplate,
    WintersApproach,
    WitsEnd,
    WoogletsWitchcap,
    WordlessPromise,
    WorldAtlas,
    YoumuusGhostblade,
    YourCut,
    YunTalWildarrows,
    ZazZaksRealmspike,
    Zeal,
    ZekesConvergence,
    Zephyr,
    ZhonyasHourglass,
}

#[derive(Debug, Copy, Clone, PartialEq, Deserialize, Serialize)]
pub enum RuneId {
    Aery,
    Aftershock,
    CheapShot,
    Comet,
    DarkHarvest,
    Electrocute,
    Grasp,
    Predator,
    PressTheAttack,
    Scorch,
    SuddenImpact,
}

macro_rules! impl_unsafe_cast {
    ($t:ty, $n:ty) => {
        impl $t {
            pub fn unsafe_cast(n: $n) -> $t {
                unsafe { std::mem::transmute(n) }
            }
        }
    };
}

impl_unsafe_cast!(ChampionId, u8);
impl_unsafe_cast!(ItemId, u16);
impl_unsafe_cast!(RuneId, u8);

pub static ITEM_ID_TO_U32: [u32; 314] = [
    8020, 3105, 3113, 1052, 228001, 1508, 3348, 3003, 3504, 3174, 223039, 6696, 6660, 4642, 3102,
    1506, 3006, 1038, 3071, 2503, 447122, 3599, 3153, 1026, 4630, 8010, 3877, 3072, 1001, 3009,
    3867, 3076, 2141, 3803, 3133, 3869, 3173, 1031, 6609, 1018, 443059, 1029, 2055, 4629, 3171,
    444644, 447109, 3137, 3801, 1083, 1042, 1082, 443054, 6621, 3742, 6333, 3902, 447107, 444637,
    443056, 447113, 447120, 446632, 1055, 1056, 1054, 447106, 3870, 446691, 6620, 6692, 3814,
    443063, 2151, 2152, 2138, 2150, 2139, 2140, 447105, 2146, 3508, 446656, 3123, 3073, 3513, 1004,
    3363, 2508, 3108, 3121, 3901, 447112, 3114, 443061, 4401, 3176, 3110, 443055, 446671, 447101,
    443193, 223005, 1011, 3024, 2022, 226630, 3026, 2049, 3177, 223185, 3184, 2051, 3112, 2050,
    3124, 1509, 1102, 443069, 3147, 2003, 3051, 3084, 4017, 447103, 443081, 3155, 3145, 223146,
    3152, 6664, 4628, 6697, 3181, 6662, 6673, 4005, 3031, 447104, 3158, 6665, 2144, 2142, 2143,
    2504, 3067, 447116, 3109, 6672, 1501, 3035, 220003, 220001, 220004, 220002, 220006, 220005,
    6653, 3100, 4003, 447119, 3190, 1036, 3036, 3802, 2145, 6655, 3118, 3004, 3156, 3041, 3139,
    3111, 3222, 447100, 447110, 6617, 3165, 3033, 1103, 3042, 3115, 6675, 1058, 1057, 444636, 6670,
    1033, 3916, 1500, 6701, 3364, 1507, 2501, 4015, 3044, 3046, 1510, 1037, 3047, 2052, 220007,
    6698, 446693, 447123, 447118, 3140, 3089, 446667, 3903, 3143, 3094, 3074, 447102, 443090, 6690,
    1043, 3107, 2031, 447115, 1502, 1006, 447114, 4633, 3430, 6657, 1028, 3085, 447108, 3866, 3116,
    443062, 1027, 3330, 1101, 3144, 2420, 3040, 6695, 3134, 6694, 4645, 2421, 3057, 443058, 2065,
    2422, 3876, 3020, 3161, 224004, 3211, 3175, 3065, 6616, 220000, 3087, 3340, 2019, 3053, 223095,
    4646, 6631, 6610, 3068, 1511, 1512, 3170, 4011, 443060, 3010, 3013, 443064, 3070, 3302, 2020,
    6676, 224403, 3075, 3077, 3748, 2010, 3002, 3078, 2021, 443079, 1515, 447121, 443080, 3179,
    2502, 1053, 4632, 4643, 3135, 6699, 1503, 3082, 3083, 4638, 3066, 3119, 3091, 228002, 4016,
    3865, 3142, 3400, 3032, 3871, 3086, 3050, 3172, 3157,
];

impl ItemId {
    pub fn to_u32(&self) -> u32 {
        unsafe { *ITEM_ID_TO_U32.get_unchecked(*self as usize) }
    }
    pub const fn from_u32(id: u32) -> Self {
        match id {
            8020 => ItemId::AbyssalMask,
            3105 => ItemId::AegisoftheLegion,
            3113 => ItemId::AetherWisp,
            1052 => ItemId::AmplifyingTome,
            228001 => ItemId::AnathemasChains,
            1508 => ItemId::AntiTowerSocks,
            3348 => ItemId::ArcaneSweeperTrinket,
            3003 => ItemId::ArchangelsStaff,
            3504 => ItemId::ArdentCenser,
            3174 => ItemId::ArmoredAdvance,
            223039 => ItemId::AtmasReckoning,
            6696 => ItemId::AxiomArc,
            6660 => ItemId::BamisCinder,
            4642 => ItemId::BandleglassMirror,
            3102 => ItemId::BansheesVeil,
            1506 => ItemId::BaseTurretReinforcedArmorTurretItem,
            3006 => ItemId::BerserkersGreaves,
            1038 => ItemId::BFSword,
            3071 => ItemId::BlackCleaver,
            2503 => ItemId::BlackfireTorch,
            447122 => ItemId::BlackHoleGauntlet,
            3599 => ItemId::BlackSpear,
            3153 => ItemId::BladeoftheRuinedKing,
            1026 => ItemId::BlastingWand,
            4630 => ItemId::BlightingJewel,
            8010 => ItemId::BloodlettersCurse,
            3877 => ItemId::Bloodsong,
            3072 => ItemId::Bloodthirster,
            1001 => ItemId::Boots,
            3009 => ItemId::BootsofSwiftness,
            3867 => ItemId::BountyofWorlds,
            3076 => ItemId::BrambleVest,
            2141 => ItemId::CappaJuice,
            3803 => ItemId::CatalystofAeons,
            3133 => ItemId::CaulfieldsWarhammer,
            3869 => ItemId::CelestialOpposition,
            3173 => ItemId::ChainlacedCrushers,
            1031 => ItemId::ChainVest,
            6609 => ItemId::ChempunkChainsword,
            1018 => ItemId::CloakofAgility,
            443059 => ItemId::CloakofStarryNight,
            1029 => ItemId::ClothArmor,
            2055 => ItemId::ControlWard,
            4629 => ItemId::CosmicDrive,
            3171 => ItemId::CrimsonLucidity,
            444644 => ItemId::CrownoftheShatteredQueen,
            447109 => ItemId::Cruelty,
            3137 => ItemId::Cryptbloom,
            3801 => ItemId::CrystallineBracer,
            1083 => ItemId::Cull,
            1042 => ItemId::Dagger,
            1082 => ItemId::DarkSeal,
            443054 => ItemId::DarksteelTalons,
            6621 => ItemId::Dawncore,
            3742 => ItemId::DeadMansPlate,
            6333 => ItemId::DeathsDance,
            3902 => ItemId::DeathsDaughter,
            447107 => ItemId::Decapitator,
            444637 => ItemId::DemonicEmbrace,
            443056 => ItemId::DemonKingsCrown,
            447113 => ItemId::DetonationOrb,
            447120 => ItemId::DiamondTippedSpear,
            446632 => ItemId::DivineSunderer,
            1055 => ItemId::DoransBlade,
            1056 => ItemId::DoransRing,
            1054 => ItemId::DoransShield,
            447106 => ItemId::Dragonheart,
            3870 => ItemId::DreamMaker,
            446691 => ItemId::DuskbladeofDraktharr,
            6620 => ItemId::EchoesofHelia,
            6692 => ItemId::Eclipse,
            3814 => ItemId::EdgeofNight,
            443063 => ItemId::EleisasMiracle,
            2151 => ItemId::ElixirofAvarice,
            2152 => ItemId::ElixirofForce,
            2138 => ItemId::ElixirofIron,
            2150 => ItemId::ElixirofSkill,
            2139 => ItemId::ElixirofSorcery,
            2140 => ItemId::ElixirofWrath,
            447105 => ItemId::EmpyreanPromise,
            2146 => ItemId::EnhancedLuckyDice,
            3508 => ItemId::EssenceReaver,
            446656 => ItemId::Everfrost,
            3123 => ItemId::ExecutionersCalling,
            3073 => ItemId::ExperimentalHexplate,
            3513 => ItemId::EyeoftheHerald,
            1004 => ItemId::FaerieCharm,
            3363 => ItemId::FarsightAlteration,
            2508 => ItemId::FatedAshes,
            3108 => ItemId::FiendishCodex,
            3121 => ItemId::Fimbulwinter,
            3901 => ItemId::FireatWill,
            447112 => ItemId::Flesheater,
            3114 => ItemId::ForbiddenIdol,
            443061 => ItemId::ForceofEntropy,
            4401 => ItemId::ForceofNature,
            3176 => ItemId::ForeverForward,
            3110 => ItemId::FrozenHeart,
            443055 => ItemId::Fulmination,
            446671 => ItemId::Galeforce,
            447101 => ItemId::GamblersBlade,
            443193 => ItemId::GargoyleStoneplate,
            223005 => ItemId::Ghostcrawlers,
            1011 => ItemId::GiantsBelt,
            3024 => ItemId::GlacialBuckler,
            2022 => ItemId::GlowingMote,
            226630 => ItemId::Goredrinker,
            3026 => ItemId::GuardianAngel,
            2049 => ItemId::GuardiansAmulet,
            3177 => ItemId::GuardiansBlade,
            223185 => ItemId::GuardiansDirk,
            3184 => ItemId::GuardiansHammer,
            2051 => ItemId::GuardiansHorn,
            3112 => ItemId::GuardiansOrb,
            2050 => ItemId::GuardiansShroud,
            3124 => ItemId::GuinsoosRageblade,
            1509 => ItemId::Gusto,
            1102 => ItemId::GustwalkerHatchling,
            443069 => ItemId::Hamstringer,
            3147 => ItemId::HauntingGuise,
            2003 => ItemId::HealthPotion,
            3051 => ItemId::HearthboundAxe,
            3084 => ItemId::Heartsteel,
            4017 => ItemId::HellfireHatchet,
            447103 => ItemId::HemomancersHelm,
            443081 => ItemId::HexboltCompanion,
            3155 => ItemId::Hexdrinker,
            3145 => ItemId::HextechAlternator,
            223146 => ItemId::HextechGunblade,
            3152 => ItemId::HextechRocketbelt,
            6664 => ItemId::HollowRadiance,
            4628 => ItemId::HorizonFocus,
            6697 => ItemId::Hubris,
            3181 => ItemId::Hullbreaker,
            6662 => ItemId::IcebornGauntlet,
            6673 => ItemId::ImmortalShieldbow,
            4005 => ItemId::ImperialMandate,
            3031 => ItemId::InfinityEdge,
            447104 => ItemId::InnervatingLocket,
            3158 => ItemId::IonianBootsofLucidity,
            6665 => ItemId::JakShoTheProtean,
            2144 => ItemId::JuiceofHaste,
            2142 => ItemId::JuiceofPower,
            2143 => ItemId::JuiceofVitality,
            2504 => ItemId::KaenicRookern,
            3067 => ItemId::Kindlegem,
            447116 => ItemId::KinkouJitte,
            3109 => ItemId::KnightsVow,
            6672 => ItemId::KrakenSlayer,
            1501 => ItemId::LaneSwapDetector,
            3035 => ItemId::LastWhisper,
            220003 => ItemId::LegendaryAssassinItem,
            220001 => ItemId::LegendaryFighterItem,
            220004 => ItemId::LegendaryMageItem,
            220002 => ItemId::LegendaryMarksmanItem,
            220006 => ItemId::LegendarySupportItem,
            220005 => ItemId::LegendaryTankItem,
            6653 => ItemId::LiandrysTorment,
            3100 => ItemId::LichBane,
            4003 => ItemId::Lifeline,
            447119 => ItemId::LightningRod,
            3190 => ItemId::LocketoftheIronSolari,
            1036 => ItemId::LongSword,
            3036 => ItemId::LordDominiksRegards,
            3802 => ItemId::LostChapter,
            2145 => ItemId::LuckyDice,
            6655 => ItemId::LudensCompanion,
            3118 => ItemId::Malignance,
            3004 => ItemId::Manamune,
            3156 => ItemId::MawofMalmortius,
            3041 => ItemId::MejaisSoulstealer,
            3139 => ItemId::MercurialScimitar,
            3111 => ItemId::MercurysTreads,
            3222 => ItemId::MikaelsBlessing,
            447100 => ItemId::MirageBlade,
            447110 => ItemId::MoonflairSpellblade,
            6617 => ItemId::MoonstoneRenewer,
            3165 => ItemId::Morellonomicon,
            3033 => ItemId::MortalReminder,
            1103 => ItemId::MosstomperSeedling,
            3042 => ItemId::Muramana,
            3115 => ItemId::NashorsTooth,
            6675 => ItemId::NavoriFlickerblade,
            1058 => ItemId::NeedlesslyLargeRod,
            1057 => ItemId::NegatronCloak,
            444636 => ItemId::NightHarvester,
            6670 => ItemId::Noonquiver,
            1033 => ItemId::NullMagicMantle,
            3916 => ItemId::OblivionOrb,
            1500 => ItemId::OhmwreckerTurretItem,
            6701 => ItemId::Opportunity,
            3364 => ItemId::OracleLens,
            1507 => ItemId::Overcharged,
            2501 => ItemId::OverlordsBloodmail,
            4015 => ItemId::Perplexity,
            3044 => ItemId::Phage,
            3046 => ItemId::PhantomDancer,
            1510 => ItemId::PhreakishGusto,
            1037 => ItemId::Pickaxe,
            3047 => ItemId::PlatedSteelcaps,
            2052 => ItemId::PoroSnax,
            220007 => ItemId::PrismaticItem,
            6698 => ItemId::ProfaneHydra,
            446693 => ItemId::ProwlersClaw,
            447123 => ItemId::Puppeteer,
            447118 => ItemId::PyromancersCloak,
            3140 => ItemId::QuicksilverSash,
            3089 => ItemId::RabadonsDeathcap,
            446667 => ItemId::RadiantVirtue,
            3903 => ItemId::RaiseMorale,
            3143 => ItemId::RanduinsOmen,
            3094 => ItemId::RapidFirecannon,
            3074 => ItemId::RavenousHydra,
            447102 => ItemId::RealityFracture,
            443090 => ItemId::ReapersToll,
            6690 => ItemId::Rectrix,
            1043 => ItemId::RecurveBow,
            3107 => ItemId::Redemption,
            2031 => ItemId::RefillablePotion,
            447115 => ItemId::Regicide,
            1502 => ItemId::ReinforcedArmorTurretItem,
            1006 => ItemId::RejuvenationBead,
            447114 => ItemId::Reverberation,
            4633 => ItemId::Riftmaker,
            3430 => ItemId::RiteofRuin,
            6657 => ItemId::RodofAges,
            1028 => ItemId::RubyCrystal,
            3085 => ItemId::RunaansHurricane,
            447108 => ItemId::Runecarver,
            3866 => ItemId::RunicCompass,
            3116 => ItemId::RylaisCrystalScepter,
            443062 => ItemId::SanguineGift,
            1027 => ItemId::SapphireCrystal,
            3330 => ItemId::ScarecrowEffigy,
            1101 => ItemId::ScorchclawPup,
            3144 => ItemId::ScoutsSlingshot,
            2420 => ItemId::SeekersArmguard,
            3040 => ItemId::SeraphsEmbrace,
            6695 => ItemId::SerpentsFang,
            3134 => ItemId::SerratedDirk,
            6694 => ItemId::SeryldasGrudge,
            4645 => ItemId::Shadowflame,
            2421 => ItemId::ShatteredArmguard,
            3057 => ItemId::Sheen,
            443058 => ItemId::ShieldofMoltenStone,
            2065 => ItemId::ShurelyasBattlesong,
            2422 => ItemId::SlightlyMagicalBoots,
            3876 => ItemId::SolsticeSleigh,
            3020 => ItemId::SorcerersShoes,
            3161 => ItemId::SpearofShojin,
            224004 => ItemId::SpectralCutlass,
            3211 => ItemId::SpectresCowl,
            3175 => ItemId::SpellslingersShoes,
            3065 => ItemId::SpiritVisage,
            6616 => ItemId::StaffofFlowingWater,
            220000 => ItemId::StatBonus,
            3087 => ItemId::StatikkShiv,
            3340 => ItemId::StealthWard,
            2019 => ItemId::SteelSigil,
            3053 => ItemId::SteraksGage,
            223095 => ItemId::Stormrazor,
            4646 => ItemId::Stormsurge,
            6631 => ItemId::Stridebreaker,
            6610 => ItemId::SunderedSky,
            3068 => ItemId::SunfireAegis,
            1511 => ItemId::SuperMechArmor,
            1512 => ItemId::SuperMechPowerField,
            3170 => ItemId::Swiftmarch,
            4011 => ItemId::SwordofBlossomingDawn,
            443060 => ItemId::SwordoftheDivine,
            3010 => ItemId::SymbioticSoles,
            3013 => ItemId::SynchronizedSouls,
            443064 => ItemId::TalismanofAscension,
            3070 => ItemId::TearoftheGoddess,
            3302 => ItemId::Terminus,
            2020 => ItemId::TheBrutalizer,
            6676 => ItemId::TheCollector,
            224403 => ItemId::TheGoldenSpatula,
            3075 => ItemId::Thornmail,
            3077 => ItemId::Tiamat,
            3748 => ItemId::TitanicHydra,
            2010 => ItemId::TotalBiscuitofEverlastingWill,
            3002 => ItemId::Trailblazer,
            3078 => ItemId::TrinityForce,
            2021 => ItemId::Tunneler,
            443079 => ItemId::TurboChemtank,
            1515 => ItemId::TurretPlating,
            447121 => ItemId::TwilightsEdge,
            443080 => ItemId::TwinMask,
            3179 => ItemId::UmbralGlaive,
            2502 => ItemId::UnendingDespair,
            1053 => ItemId::VampiricScepter,
            4632 => ItemId::VerdantBarrier,
            4643 => ItemId::VigilantWardstone,
            3135 => ItemId::VoidStaff,
            6699 => ItemId::VoltaicCyclosword,
            1503 => ItemId::WardensEye,
            3082 => ItemId::WardensMail,
            3083 => ItemId::WarmogsArmor,
            4638 => ItemId::WatchfulWardstone,
            3066 => ItemId::WingedMoonplate,
            3119 => ItemId::WintersApproach,
            3091 => ItemId::WitsEnd,
            228002 => ItemId::WoogletsWitchcap,
            4016 => ItemId::WordlessPromise,
            3865 => ItemId::WorldAtlas,
            3142 => ItemId::YoumuusGhostblade,
            3400 => ItemId::YourCut,
            3032 => ItemId::YunTalWildarrows,
            3871 => ItemId::ZazZaksRealmspike,
            3086 => ItemId::Zeal,
            3050 => ItemId::ZekesConvergence,
            3172 => ItemId::Zephyr,
            3157 => ItemId::ZhonyasHourglass,
            _ => ItemId::Boots,
        }
    }
}

pub static RUNE_ID_TO_U32: [u32; 11] = [
    8214, 8439, 8126, 8229, 8128, 8112, 8437, 8124, 8005, 8237, 8143,
];

impl RuneId {
    pub fn to_u32(&self) -> u32 {
        unsafe { *RUNE_ID_TO_U32.get_unchecked(*self as usize) }
    }
    pub const fn from_u32(rune_id: u32) -> RuneId {
        match rune_id {
            8214 => RuneId::Aery,
            8439 => RuneId::Aftershock,
            8126 => RuneId::CheapShot,
            8229 => RuneId::Comet,
            8128 => RuneId::DarkHarvest,
            8112 => RuneId::Electrocute,
            8437 => RuneId::Grasp,
            8124 => RuneId::Predator,
            8005 => RuneId::PressTheAttack,
            8237 => RuneId::Scorch,
            8143 => RuneId::SuddenImpact,
            _ => RuneId::Aery,
        }
    }
}
